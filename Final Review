
Topic 1:
Generic algorithm, lambda functions, binders and adapters

bind function:
std::bind
  #include <functional>
  using namespace std::placeholder;
  generates a forwarding call wrapper for f = invoking f with some of its argumetns bound to arg
  
  parameters:
  fn = callable object (function object, pointer to function, reference to function, pointer to member function, 
      or pointer to data member) that will be bound to some arguments
  args = list of arguments to bind, with the unbound arguments replaced by 
          the placeholders _1, _2, _3, ... of namespace std::placeholders
          
  
  return value:
    a function object, when called, calls fn with its argument bound to args
  
  double my_divide  (double x, double y) { return x/y; }
  struct MyPair {
    double a,b;
    double multiply() { return a * b; }
  };
  
  int main ()
  {
    using namespace std::placeholders;
    
    auto fn_five = std::bind (my_divide, 10, 2); //returns 10/2 = t
    std::cout << fn_five() << std::endl; //prints 5
    
    auto fn_half = std::bind (my_divide, _1, 2); //returns x/2
    std::cout << fn_half (10) << std::endl; //returns 5
    
    auto fn_invert = std::bind <int> (my_divide, _1, _2); //returns int (x/y)
    std::cout << fn_rounding (10, 3) << std::endl; //3
    
    MyPair ten_two {10, 2};
    
    //binding members:
    auto bound_mem_fn = std::bind (&MyPair::multiply, _1); //returns x.multiply()
    std::cout << bound_mem_fn (ten_two) << std::endl; //prints 20
    
    auto bound_mem_data = std::bind (&MyPair::a, ten_two); //returns ten_two.a
    std::cout << bound_mem_data() << std::endl;
  }
  
  //CLASS EXAMPLE:
  int add3Ints(int a, int b, int c) {
    int result = a + b + c;
    std::cout << result << std::endl;
    return result;
  }
  
  void modify2ndAnd3rd (int a, int& b, int& c) { //one_value param and two_ref param
    b *= 2;
    c *= 3;
  }
  
  void writeToOutputStream (ostream& out, int a) { //a function that expects an uncopyable object
    out << a << std::endl;
    return;
  }
  
  int main ()
  {
    int n1 = 3;
    int n2 = 1;
    int n3 = 4;
    
    auto f = bind(add3ints, n1, n2, n3);
    f(); 
    
    bind (add3Ints, 1, 10, 100)();
    
    
    
    
    
  
  
  
  
  
  
  
  }
  
  
  
  hello
  d
  d
  d
  d
  d
  d
  dd
  d
  d
  d
  d
  d
  d
  d
  
  
  
  
  
